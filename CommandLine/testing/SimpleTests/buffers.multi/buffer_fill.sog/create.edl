for var offset = 0; offset < 8; ++offset {
    var buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_u8, 255, buffer_get_size(buf));
    var len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_u8)); i++ {
        gtest_assert_eq(buffer_tell(buf), i + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_u8), 255);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_s8, -127, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_s8)); i++ {
        gtest_assert_eq(buffer_tell(buf), i + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_s8), -127);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_u16, 65535, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_u16)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 2 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_u16), 65535);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_s16, -32768, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_s16)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 2 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_s16), -32768);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_u32, 4294967295, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_u32)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 4 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_u32), 4294967295);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_s32, -2147483648, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_s32)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 4 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_s32), -2147483648);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_f32, 1.25, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_f32)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 4 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_f32), 1.25);
    }
    buffer_delete(buf);

    buf = buffer_create(8, buffer_grow, buffer_sizeof(buffer_f32));
    buffer_fill(buf, offset, buffer_f64, 200.651, buffer_get_size(buf));
    len = buffer_get_size(buf);
    for var i = 0; i < ((len - offset) / buffer_sizeof(buffer_f64)); i++ {
        gtest_assert_eq(buffer_tell(buf), i * 8 + offset);
        gtest_assert_eq(buffer_peek(buf, buffer_tell(buf), buffer_f64), 200.651);
    }
    buffer_delete(buf);
}

for var offset = 0; offset < 10; ++offset {
    var buf = buffer_create(20, buffer_grow, buffer_sizeof(buffer_u8));
    const char *str = "this is a string";
    buffer_seek(buf, buffer_seek_start, offset);
    buffer_write(buf, buffer_string, str);
    buffer_seek(buf, buffer_seek_start, offset);
    gtest_assert_eq(buffer_read(buf, buffer_string), str);
    var len = strlen(str);
    gtest_assert_eq(buffer_tell(buf), offset + len + 1);
    buffer_delete(buf);
}

for var offset = 0; offset < 10; ++offset {
    var buf = buffer_create(20, buffer_wrap, buffer_sizeof(buffer_u8));
    const char *str = "this is a string";
    buffer_seek(buf, buffer_seek_start, offset);
    buffer_write(buf, buffer_string, str);
    buffer_seek(buf, buffer_seek_start, offset);
    gtest_assert_eq(buffer_read(buf, buffer_string), str);
    var len = strlen(str);
    int off = offset + len + 1;
    gtest_assert_eq(buffer_tell(buf), off % 20);
    buffer_delete(buf);
}

game_end();
